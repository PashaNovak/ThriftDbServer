/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package controller.gen;

import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.annotation.Generated;
import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-04-15")
public class LocalNetsService {

  public interface Iface {

    public String createDef(String responce, String definition) throws TException;

    public String retrieveDef(String responce) throws TException;

    public String updateDef(String responce, String definition) throws TException;

    public String deleteDef(String responce) throws TException;

  }

  public interface AsyncIface {

    public void createDef(String responce, String definition, AsyncMethodCallback resultHandler) throws TException;

    public void retrieveDef(String responce, AsyncMethodCallback resultHandler) throws TException;

    public void updateDef(String responce, String definition, AsyncMethodCallback resultHandler) throws TException;

    public void deleteDef(String responce, AsyncMethodCallback resultHandler) throws TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String createDef(String responce, String definition) throws TException
    {
      send_createDef(responce, definition);
      return recv_createDef();
    }

    public void send_createDef(String responce, String definition) throws TException
    {
      createDef_args args = new createDef_args();
      args.setResponce(responce);
      args.setDefinition(definition);
      sendBase("createDef", args);
    }

    public String recv_createDef() throws TException
    {
      createDef_result result = new createDef_result();
      receiveBase(result, "createDef");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createDef failed: unknown result");
    }

    public String retrieveDef(String responce) throws TException
    {
      send_retrieveDef(responce);
      return recv_retrieveDef();
    }

    public void send_retrieveDef(String responce) throws TException
    {
      retrieveDef_args args = new retrieveDef_args();
      args.setResponce(responce);
      sendBase("retrieveDef", args);
    }

    public String recv_retrieveDef() throws TException
    {
      retrieveDef_result result = new retrieveDef_result();
      receiveBase(result, "retrieveDef");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "retrieveDef failed: unknown result");
    }

    public String updateDef(String responce, String definition) throws TException
    {
      send_updateDef(responce, definition);
      return recv_updateDef();
    }

    public void send_updateDef(String responce, String definition) throws TException
    {
      updateDef_args args = new updateDef_args();
      args.setResponce(responce);
      args.setDefinition(definition);
      sendBase("updateDef", args);
    }

    public String recv_updateDef() throws TException
    {
      updateDef_result result = new updateDef_result();
      receiveBase(result, "updateDef");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateDef failed: unknown result");
    }

    public String deleteDef(String responce) throws TException
    {
      send_deleteDef(responce);
      return recv_deleteDef();
    }

    public void send_deleteDef(String responce) throws TException
    {
      deleteDef_args args = new deleteDef_args();
      args.setResponce(responce);
      sendBase("deleteDef", args);
    }

    public String recv_deleteDef() throws TException
    {
      deleteDef_result result = new deleteDef_result();
      receiveBase(result, "deleteDef");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteDef failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void createDef(String responce, String definition, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      createDef_call method_call = new createDef_call(responce, definition, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createDef_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String responce;
      private String definition;
      public createDef_call(String responce, String definition, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.responce = responce;
        this.definition = definition;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createDef", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createDef_args args = new createDef_args();
        args.setResponce(responce);
        args.setDefinition(definition);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createDef();
      }
    }

    public void retrieveDef(String responce, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      retrieveDef_call method_call = new retrieveDef_call(responce, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class retrieveDef_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String responce;
      public retrieveDef_call(String responce, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.responce = responce;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("retrieveDef", org.apache.thrift.protocol.TMessageType.CALL, 0));
        retrieveDef_args args = new retrieveDef_args();
        args.setResponce(responce);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_retrieveDef();
      }
    }

    public void updateDef(String responce, String definition, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      updateDef_call method_call = new updateDef_call(responce, definition, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateDef_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String responce;
      private String definition;
      public updateDef_call(String responce, String definition, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.responce = responce;
        this.definition = definition;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateDef", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateDef_args args = new updateDef_args();
        args.setResponce(responce);
        args.setDefinition(definition);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateDef();
      }
    }

    public void deleteDef(String responce, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      deleteDef_call method_call = new deleteDef_call(responce, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteDef_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String responce;
      public deleteDef_call(String responce, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.responce = responce;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteDef", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteDef_args args = new deleteDef_args();
        args.setResponce(responce);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteDef();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("createDef", new createDef());
      processMap.put("retrieveDef", new retrieveDef());
      processMap.put("updateDef", new updateDef());
      processMap.put("deleteDef", new deleteDef());
      return processMap;
    }

    public static class createDef<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createDef_args> {
      public createDef() {
        super("createDef");
      }

      public createDef_args getEmptyArgsInstance() {
        return new createDef_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createDef_result getResult(I iface, createDef_args args) throws TException {
        createDef_result result = new createDef_result();
        result.success = iface.createDef(args.responce, args.definition);
        return result;
      }
    }

    public static class retrieveDef<I extends Iface> extends org.apache.thrift.ProcessFunction<I, retrieveDef_args> {
      public retrieveDef() {
        super("retrieveDef");
      }

      public retrieveDef_args getEmptyArgsInstance() {
        return new retrieveDef_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public retrieveDef_result getResult(I iface, retrieveDef_args args) throws TException {
        retrieveDef_result result = new retrieveDef_result();
        result.success = iface.retrieveDef(args.responce);
        return result;
      }
    }

    public static class updateDef<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateDef_args> {
      public updateDef() {
        super("updateDef");
      }

      public updateDef_args getEmptyArgsInstance() {
        return new updateDef_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateDef_result getResult(I iface, updateDef_args args) throws TException {
        updateDef_result result = new updateDef_result();
        result.success = iface.updateDef(args.responce, args.definition);
        return result;
      }
    }

    public static class deleteDef<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteDef_args> {
      public deleteDef() {
        super("deleteDef");
      }

      public deleteDef_args getEmptyArgsInstance() {
        return new deleteDef_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteDef_result getResult(I iface, deleteDef_args args) throws TException {
        deleteDef_result result = new deleteDef_result();
        result.success = iface.deleteDef(args.responce);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("createDef", new createDef());
      processMap.put("retrieveDef", new retrieveDef());
      processMap.put("updateDef", new updateDef());
      processMap.put("deleteDef", new deleteDef());
      return processMap;
    }

    public static class createDef<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createDef_args, String> {
      public createDef() {
        super("createDef");
      }

      public createDef_args getEmptyArgsInstance() {
        return new createDef_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() {
          public void onComplete(String o) {
            createDef_result result = new createDef_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            createDef_result result = new createDef_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createDef_args args, AsyncMethodCallback<String> resultHandler) throws TException {
        iface.createDef(args.responce, args.definition,resultHandler);
      }
    }

    public static class retrieveDef<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, retrieveDef_args, String> {
      public retrieveDef() {
        super("retrieveDef");
      }

      public retrieveDef_args getEmptyArgsInstance() {
        return new retrieveDef_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() {
          public void onComplete(String o) {
            retrieveDef_result result = new retrieveDef_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            retrieveDef_result result = new retrieveDef_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, retrieveDef_args args, AsyncMethodCallback<String> resultHandler) throws TException {
        iface.retrieveDef(args.responce,resultHandler);
      }
    }

    public static class updateDef<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateDef_args, String> {
      public updateDef() {
        super("updateDef");
      }

      public updateDef_args getEmptyArgsInstance() {
        return new updateDef_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() {
          public void onComplete(String o) {
            updateDef_result result = new updateDef_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateDef_result result = new updateDef_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateDef_args args, AsyncMethodCallback<String> resultHandler) throws TException {
        iface.updateDef(args.responce, args.definition,resultHandler);
      }
    }

    public static class deleteDef<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteDef_args, String> {
      public deleteDef() {
        super("deleteDef");
      }

      public deleteDef_args getEmptyArgsInstance() {
        return new deleteDef_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() {
          public void onComplete(String o) {
            deleteDef_result result = new deleteDef_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteDef_result result = new deleteDef_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteDef_args args, AsyncMethodCallback<String> resultHandler) throws TException {
        iface.deleteDef(args.responce,resultHandler);
      }
    }

  }

  public static class createDef_args implements org.apache.thrift.TBase<createDef_args, createDef_args._Fields>, java.io.Serializable, Cloneable, Comparable<createDef_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createDef_args");

    private static final org.apache.thrift.protocol.TField RESPONCE_FIELD_DESC = new org.apache.thrift.protocol.TField("responce", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DEFINITION_FIELD_DESC = new org.apache.thrift.protocol.TField("definition", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createDef_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createDef_argsTupleSchemeFactory());
    }

    public String responce; // required
    public String definition; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RESPONCE((short)1, "responce"),
      DEFINITION((short)2, "definition");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RESPONCE
            return RESPONCE;
          case 2: // DEFINITION
            return DEFINITION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RESPONCE, new org.apache.thrift.meta_data.FieldMetaData("responce", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DEFINITION, new org.apache.thrift.meta_data.FieldMetaData("definition", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createDef_args.class, metaDataMap);
    }

    public createDef_args() {
    }

    public createDef_args(
      String responce,
      String definition)
    {
      this();
      this.responce = responce;
      this.definition = definition;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createDef_args(createDef_args other) {
      if (other.isSetResponce()) {
        this.responce = other.responce;
      }
      if (other.isSetDefinition()) {
        this.definition = other.definition;
      }
    }

    public createDef_args deepCopy() {
      return new createDef_args(this);
    }

    @Override
    public void clear() {
      this.responce = null;
      this.definition = null;
    }

    public String getResponce() {
      return this.responce;
    }

    public createDef_args setResponce(String responce) {
      this.responce = responce;
      return this;
    }

    public void unsetResponce() {
      this.responce = null;
    }

    /** Returns true if field responce is set (has been assigned a value) and false otherwise */
    public boolean isSetResponce() {
      return this.responce != null;
    }

    public void setResponceIsSet(boolean value) {
      if (!value) {
        this.responce = null;
      }
    }

    public String getDefinition() {
      return this.definition;
    }

    public createDef_args setDefinition(String definition) {
      this.definition = definition;
      return this;
    }

    public void unsetDefinition() {
      this.definition = null;
    }

    /** Returns true if field definition is set (has been assigned a value) and false otherwise */
    public boolean isSetDefinition() {
      return this.definition != null;
    }

    public void setDefinitionIsSet(boolean value) {
      if (!value) {
        this.definition = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RESPONCE:
        if (value == null) {
          unsetResponce();
        } else {
          setResponce((String)value);
        }
        break;

      case DEFINITION:
        if (value == null) {
          unsetDefinition();
        } else {
          setDefinition((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RESPONCE:
        return getResponce();

      case DEFINITION:
        return getDefinition();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RESPONCE:
        return isSetResponce();
      case DEFINITION:
        return isSetDefinition();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createDef_args)
        return this.equals((createDef_args)that);
      return false;
    }

    public boolean equals(createDef_args that) {
      if (that == null)
        return false;

      boolean this_present_responce = true && this.isSetResponce();
      boolean that_present_responce = true && that.isSetResponce();
      if (this_present_responce || that_present_responce) {
        if (!(this_present_responce && that_present_responce))
          return false;
        if (!this.responce.equals(that.responce))
          return false;
      }

      boolean this_present_definition = true && this.isSetDefinition();
      boolean that_present_definition = true && that.isSetDefinition();
      if (this_present_definition || that_present_definition) {
        if (!(this_present_definition && that_present_definition))
          return false;
        if (!this.definition.equals(that.definition))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_responce = true && (isSetResponce());
      list.add(present_responce);
      if (present_responce)
        list.add(responce);

      boolean present_definition = true && (isSetDefinition());
      list.add(present_definition);
      if (present_definition)
        list.add(definition);

      return list.hashCode();
    }

    @Override
    public int compareTo(createDef_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetResponce()).compareTo(other.isSetResponce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetResponce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.responce, other.responce);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDefinition()).compareTo(other.isSetDefinition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDefinition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.definition, other.definition);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createDef_args(");
      boolean first = true;

      sb.append("responce:");
      if (this.responce == null) {
        sb.append("null");
      } else {
        sb.append(this.responce);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("definition:");
      if (this.definition == null) {
        sb.append("null");
      } else {
        sb.append(this.definition);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createDef_argsStandardSchemeFactory implements SchemeFactory {
      public createDef_argsStandardScheme getScheme() {
        return new createDef_argsStandardScheme();
      }
    }

    private static class createDef_argsStandardScheme extends StandardScheme<createDef_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createDef_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // RESPONCE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.responce = iprot.readString();
                struct.setResponceIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEFINITION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.definition = iprot.readString();
                struct.setDefinitionIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createDef_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.responce != null) {
          oprot.writeFieldBegin(RESPONCE_FIELD_DESC);
          oprot.writeString(struct.responce);
          oprot.writeFieldEnd();
        }
        if (struct.definition != null) {
          oprot.writeFieldBegin(DEFINITION_FIELD_DESC);
          oprot.writeString(struct.definition);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createDef_argsTupleSchemeFactory implements SchemeFactory {
      public createDef_argsTupleScheme getScheme() {
        return new createDef_argsTupleScheme();
      }
    }

    private static class createDef_argsTupleScheme extends TupleScheme<createDef_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createDef_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetResponce()) {
          optionals.set(0);
        }
        if (struct.isSetDefinition()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetResponce()) {
          oprot.writeString(struct.responce);
        }
        if (struct.isSetDefinition()) {
          oprot.writeString(struct.definition);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createDef_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.responce = iprot.readString();
          struct.setResponceIsSet(true);
        }
        if (incoming.get(1)) {
          struct.definition = iprot.readString();
          struct.setDefinitionIsSet(true);
        }
      }
    }

  }

  public static class createDef_result implements org.apache.thrift.TBase<createDef_result, createDef_result._Fields>, java.io.Serializable, Cloneable, Comparable<createDef_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createDef_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createDef_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createDef_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createDef_result.class, metaDataMap);
    }

    public createDef_result() {
    }

    public createDef_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createDef_result(createDef_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public createDef_result deepCopy() {
      return new createDef_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public createDef_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createDef_result)
        return this.equals((createDef_result)that);
      return false;
    }

    public boolean equals(createDef_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(createDef_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createDef_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createDef_resultStandardSchemeFactory implements SchemeFactory {
      public createDef_resultStandardScheme getScheme() {
        return new createDef_resultStandardScheme();
      }
    }

    private static class createDef_resultStandardScheme extends StandardScheme<createDef_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createDef_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createDef_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createDef_resultTupleSchemeFactory implements SchemeFactory {
      public createDef_resultTupleScheme getScheme() {
        return new createDef_resultTupleScheme();
      }
    }

    private static class createDef_resultTupleScheme extends TupleScheme<createDef_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createDef_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createDef_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class retrieveDef_args implements org.apache.thrift.TBase<retrieveDef_args, retrieveDef_args._Fields>, java.io.Serializable, Cloneable, Comparable<retrieveDef_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("retrieveDef_args");

    private static final org.apache.thrift.protocol.TField RESPONCE_FIELD_DESC = new org.apache.thrift.protocol.TField("responce", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new retrieveDef_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new retrieveDef_argsTupleSchemeFactory());
    }

    public String responce; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RESPONCE((short)1, "responce");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RESPONCE
            return RESPONCE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RESPONCE, new org.apache.thrift.meta_data.FieldMetaData("responce", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(retrieveDef_args.class, metaDataMap);
    }

    public retrieveDef_args() {
    }

    public retrieveDef_args(
      String responce)
    {
      this();
      this.responce = responce;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public retrieveDef_args(retrieveDef_args other) {
      if (other.isSetResponce()) {
        this.responce = other.responce;
      }
    }

    public retrieveDef_args deepCopy() {
      return new retrieveDef_args(this);
    }

    @Override
    public void clear() {
      this.responce = null;
    }

    public String getResponce() {
      return this.responce;
    }

    public retrieveDef_args setResponce(String responce) {
      this.responce = responce;
      return this;
    }

    public void unsetResponce() {
      this.responce = null;
    }

    /** Returns true if field responce is set (has been assigned a value) and false otherwise */
    public boolean isSetResponce() {
      return this.responce != null;
    }

    public void setResponceIsSet(boolean value) {
      if (!value) {
        this.responce = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RESPONCE:
        if (value == null) {
          unsetResponce();
        } else {
          setResponce((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RESPONCE:
        return getResponce();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RESPONCE:
        return isSetResponce();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof retrieveDef_args)
        return this.equals((retrieveDef_args)that);
      return false;
    }

    public boolean equals(retrieveDef_args that) {
      if (that == null)
        return false;

      boolean this_present_responce = true && this.isSetResponce();
      boolean that_present_responce = true && that.isSetResponce();
      if (this_present_responce || that_present_responce) {
        if (!(this_present_responce && that_present_responce))
          return false;
        if (!this.responce.equals(that.responce))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_responce = true && (isSetResponce());
      list.add(present_responce);
      if (present_responce)
        list.add(responce);

      return list.hashCode();
    }

    @Override
    public int compareTo(retrieveDef_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetResponce()).compareTo(other.isSetResponce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetResponce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.responce, other.responce);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("retrieveDef_args(");
      boolean first = true;

      sb.append("responce:");
      if (this.responce == null) {
        sb.append("null");
      } else {
        sb.append(this.responce);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class retrieveDef_argsStandardSchemeFactory implements SchemeFactory {
      public retrieveDef_argsStandardScheme getScheme() {
        return new retrieveDef_argsStandardScheme();
      }
    }

    private static class retrieveDef_argsStandardScheme extends StandardScheme<retrieveDef_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, retrieveDef_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // RESPONCE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.responce = iprot.readString();
                struct.setResponceIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, retrieveDef_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.responce != null) {
          oprot.writeFieldBegin(RESPONCE_FIELD_DESC);
          oprot.writeString(struct.responce);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class retrieveDef_argsTupleSchemeFactory implements SchemeFactory {
      public retrieveDef_argsTupleScheme getScheme() {
        return new retrieveDef_argsTupleScheme();
      }
    }

    private static class retrieveDef_argsTupleScheme extends TupleScheme<retrieveDef_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, retrieveDef_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetResponce()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetResponce()) {
          oprot.writeString(struct.responce);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, retrieveDef_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.responce = iprot.readString();
          struct.setResponceIsSet(true);
        }
      }
    }

  }

  public static class retrieveDef_result implements org.apache.thrift.TBase<retrieveDef_result, retrieveDef_result._Fields>, java.io.Serializable, Cloneable, Comparable<retrieveDef_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("retrieveDef_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new retrieveDef_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new retrieveDef_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(retrieveDef_result.class, metaDataMap);
    }

    public retrieveDef_result() {
    }

    public retrieveDef_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public retrieveDef_result(retrieveDef_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public retrieveDef_result deepCopy() {
      return new retrieveDef_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public retrieveDef_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof retrieveDef_result)
        return this.equals((retrieveDef_result)that);
      return false;
    }

    public boolean equals(retrieveDef_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(retrieveDef_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("retrieveDef_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class retrieveDef_resultStandardSchemeFactory implements SchemeFactory {
      public retrieveDef_resultStandardScheme getScheme() {
        return new retrieveDef_resultStandardScheme();
      }
    }

    private static class retrieveDef_resultStandardScheme extends StandardScheme<retrieveDef_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, retrieveDef_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, retrieveDef_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class retrieveDef_resultTupleSchemeFactory implements SchemeFactory {
      public retrieveDef_resultTupleScheme getScheme() {
        return new retrieveDef_resultTupleScheme();
      }
    }

    private static class retrieveDef_resultTupleScheme extends TupleScheme<retrieveDef_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, retrieveDef_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, retrieveDef_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateDef_args implements org.apache.thrift.TBase<updateDef_args, updateDef_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateDef_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateDef_args");

    private static final org.apache.thrift.protocol.TField RESPONCE_FIELD_DESC = new org.apache.thrift.protocol.TField("responce", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DEFINITION_FIELD_DESC = new org.apache.thrift.protocol.TField("definition", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateDef_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateDef_argsTupleSchemeFactory());
    }

    public String responce; // required
    public String definition; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RESPONCE((short)1, "responce"),
      DEFINITION((short)2, "definition");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RESPONCE
            return RESPONCE;
          case 2: // DEFINITION
            return DEFINITION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RESPONCE, new org.apache.thrift.meta_data.FieldMetaData("responce", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DEFINITION, new org.apache.thrift.meta_data.FieldMetaData("definition", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateDef_args.class, metaDataMap);
    }

    public updateDef_args() {
    }

    public updateDef_args(
      String responce,
      String definition)
    {
      this();
      this.responce = responce;
      this.definition = definition;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateDef_args(updateDef_args other) {
      if (other.isSetResponce()) {
        this.responce = other.responce;
      }
      if (other.isSetDefinition()) {
        this.definition = other.definition;
      }
    }

    public updateDef_args deepCopy() {
      return new updateDef_args(this);
    }

    @Override
    public void clear() {
      this.responce = null;
      this.definition = null;
    }

    public String getResponce() {
      return this.responce;
    }

    public updateDef_args setResponce(String responce) {
      this.responce = responce;
      return this;
    }

    public void unsetResponce() {
      this.responce = null;
    }

    /** Returns true if field responce is set (has been assigned a value) and false otherwise */
    public boolean isSetResponce() {
      return this.responce != null;
    }

    public void setResponceIsSet(boolean value) {
      if (!value) {
        this.responce = null;
      }
    }

    public String getDefinition() {
      return this.definition;
    }

    public updateDef_args setDefinition(String definition) {
      this.definition = definition;
      return this;
    }

    public void unsetDefinition() {
      this.definition = null;
    }

    /** Returns true if field definition is set (has been assigned a value) and false otherwise */
    public boolean isSetDefinition() {
      return this.definition != null;
    }

    public void setDefinitionIsSet(boolean value) {
      if (!value) {
        this.definition = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RESPONCE:
        if (value == null) {
          unsetResponce();
        } else {
          setResponce((String)value);
        }
        break;

      case DEFINITION:
        if (value == null) {
          unsetDefinition();
        } else {
          setDefinition((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RESPONCE:
        return getResponce();

      case DEFINITION:
        return getDefinition();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RESPONCE:
        return isSetResponce();
      case DEFINITION:
        return isSetDefinition();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateDef_args)
        return this.equals((updateDef_args)that);
      return false;
    }

    public boolean equals(updateDef_args that) {
      if (that == null)
        return false;

      boolean this_present_responce = true && this.isSetResponce();
      boolean that_present_responce = true && that.isSetResponce();
      if (this_present_responce || that_present_responce) {
        if (!(this_present_responce && that_present_responce))
          return false;
        if (!this.responce.equals(that.responce))
          return false;
      }

      boolean this_present_definition = true && this.isSetDefinition();
      boolean that_present_definition = true && that.isSetDefinition();
      if (this_present_definition || that_present_definition) {
        if (!(this_present_definition && that_present_definition))
          return false;
        if (!this.definition.equals(that.definition))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_responce = true && (isSetResponce());
      list.add(present_responce);
      if (present_responce)
        list.add(responce);

      boolean present_definition = true && (isSetDefinition());
      list.add(present_definition);
      if (present_definition)
        list.add(definition);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateDef_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetResponce()).compareTo(other.isSetResponce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetResponce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.responce, other.responce);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDefinition()).compareTo(other.isSetDefinition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDefinition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.definition, other.definition);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateDef_args(");
      boolean first = true;

      sb.append("responce:");
      if (this.responce == null) {
        sb.append("null");
      } else {
        sb.append(this.responce);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("definition:");
      if (this.definition == null) {
        sb.append("null");
      } else {
        sb.append(this.definition);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateDef_argsStandardSchemeFactory implements SchemeFactory {
      public updateDef_argsStandardScheme getScheme() {
        return new updateDef_argsStandardScheme();
      }
    }

    private static class updateDef_argsStandardScheme extends StandardScheme<updateDef_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateDef_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // RESPONCE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.responce = iprot.readString();
                struct.setResponceIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEFINITION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.definition = iprot.readString();
                struct.setDefinitionIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateDef_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.responce != null) {
          oprot.writeFieldBegin(RESPONCE_FIELD_DESC);
          oprot.writeString(struct.responce);
          oprot.writeFieldEnd();
        }
        if (struct.definition != null) {
          oprot.writeFieldBegin(DEFINITION_FIELD_DESC);
          oprot.writeString(struct.definition);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateDef_argsTupleSchemeFactory implements SchemeFactory {
      public updateDef_argsTupleScheme getScheme() {
        return new updateDef_argsTupleScheme();
      }
    }

    private static class updateDef_argsTupleScheme extends TupleScheme<updateDef_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateDef_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetResponce()) {
          optionals.set(0);
        }
        if (struct.isSetDefinition()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetResponce()) {
          oprot.writeString(struct.responce);
        }
        if (struct.isSetDefinition()) {
          oprot.writeString(struct.definition);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateDef_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.responce = iprot.readString();
          struct.setResponceIsSet(true);
        }
        if (incoming.get(1)) {
          struct.definition = iprot.readString();
          struct.setDefinitionIsSet(true);
        }
      }
    }

  }

  public static class updateDef_result implements org.apache.thrift.TBase<updateDef_result, updateDef_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateDef_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateDef_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateDef_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateDef_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateDef_result.class, metaDataMap);
    }

    public updateDef_result() {
    }

    public updateDef_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateDef_result(updateDef_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public updateDef_result deepCopy() {
      return new updateDef_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public updateDef_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateDef_result)
        return this.equals((updateDef_result)that);
      return false;
    }

    public boolean equals(updateDef_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateDef_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateDef_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateDef_resultStandardSchemeFactory implements SchemeFactory {
      public updateDef_resultStandardScheme getScheme() {
        return new updateDef_resultStandardScheme();
      }
    }

    private static class updateDef_resultStandardScheme extends StandardScheme<updateDef_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateDef_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateDef_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateDef_resultTupleSchemeFactory implements SchemeFactory {
      public updateDef_resultTupleScheme getScheme() {
        return new updateDef_resultTupleScheme();
      }
    }

    private static class updateDef_resultTupleScheme extends TupleScheme<updateDef_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateDef_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateDef_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteDef_args implements org.apache.thrift.TBase<deleteDef_args, deleteDef_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteDef_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteDef_args");

    private static final org.apache.thrift.protocol.TField RESPONCE_FIELD_DESC = new org.apache.thrift.protocol.TField("responce", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteDef_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteDef_argsTupleSchemeFactory());
    }

    public String responce; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RESPONCE((short)1, "responce");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RESPONCE
            return RESPONCE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RESPONCE, new org.apache.thrift.meta_data.FieldMetaData("responce", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteDef_args.class, metaDataMap);
    }

    public deleteDef_args() {
    }

    public deleteDef_args(
      String responce)
    {
      this();
      this.responce = responce;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteDef_args(deleteDef_args other) {
      if (other.isSetResponce()) {
        this.responce = other.responce;
      }
    }

    public deleteDef_args deepCopy() {
      return new deleteDef_args(this);
    }

    @Override
    public void clear() {
      this.responce = null;
    }

    public String getResponce() {
      return this.responce;
    }

    public deleteDef_args setResponce(String responce) {
      this.responce = responce;
      return this;
    }

    public void unsetResponce() {
      this.responce = null;
    }

    /** Returns true if field responce is set (has been assigned a value) and false otherwise */
    public boolean isSetResponce() {
      return this.responce != null;
    }

    public void setResponceIsSet(boolean value) {
      if (!value) {
        this.responce = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RESPONCE:
        if (value == null) {
          unsetResponce();
        } else {
          setResponce((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RESPONCE:
        return getResponce();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RESPONCE:
        return isSetResponce();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteDef_args)
        return this.equals((deleteDef_args)that);
      return false;
    }

    public boolean equals(deleteDef_args that) {
      if (that == null)
        return false;

      boolean this_present_responce = true && this.isSetResponce();
      boolean that_present_responce = true && that.isSetResponce();
      if (this_present_responce || that_present_responce) {
        if (!(this_present_responce && that_present_responce))
          return false;
        if (!this.responce.equals(that.responce))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_responce = true && (isSetResponce());
      list.add(present_responce);
      if (present_responce)
        list.add(responce);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteDef_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetResponce()).compareTo(other.isSetResponce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetResponce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.responce, other.responce);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteDef_args(");
      boolean first = true;

      sb.append("responce:");
      if (this.responce == null) {
        sb.append("null");
      } else {
        sb.append(this.responce);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteDef_argsStandardSchemeFactory implements SchemeFactory {
      public deleteDef_argsStandardScheme getScheme() {
        return new deleteDef_argsStandardScheme();
      }
    }

    private static class deleteDef_argsStandardScheme extends StandardScheme<deleteDef_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteDef_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // RESPONCE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.responce = iprot.readString();
                struct.setResponceIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteDef_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.responce != null) {
          oprot.writeFieldBegin(RESPONCE_FIELD_DESC);
          oprot.writeString(struct.responce);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteDef_argsTupleSchemeFactory implements SchemeFactory {
      public deleteDef_argsTupleScheme getScheme() {
        return new deleteDef_argsTupleScheme();
      }
    }

    private static class deleteDef_argsTupleScheme extends TupleScheme<deleteDef_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteDef_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetResponce()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetResponce()) {
          oprot.writeString(struct.responce);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteDef_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.responce = iprot.readString();
          struct.setResponceIsSet(true);
        }
      }
    }

  }

  public static class deleteDef_result implements org.apache.thrift.TBase<deleteDef_result, deleteDef_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteDef_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteDef_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteDef_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteDef_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteDef_result.class, metaDataMap);
    }

    public deleteDef_result() {
    }

    public deleteDef_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteDef_result(deleteDef_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public deleteDef_result deepCopy() {
      return new deleteDef_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public deleteDef_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteDef_result)
        return this.equals((deleteDef_result)that);
      return false;
    }

    public boolean equals(deleteDef_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteDef_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteDef_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteDef_resultStandardSchemeFactory implements SchemeFactory {
      public deleteDef_resultStandardScheme getScheme() {
        return new deleteDef_resultStandardScheme();
      }
    }

    private static class deleteDef_resultStandardScheme extends StandardScheme<deleteDef_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteDef_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteDef_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteDef_resultTupleSchemeFactory implements SchemeFactory {
      public deleteDef_resultTupleScheme getScheme() {
        return new deleteDef_resultTupleScheme();
      }
    }

    private static class deleteDef_resultTupleScheme extends TupleScheme<deleteDef_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteDef_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteDef_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
